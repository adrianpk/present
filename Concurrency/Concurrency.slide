# Go Concurrency

Adrian
8 Mar 2024
me@adrianpk.com

## Goroutines

- Lightweight concurrent units of execution.

- Allows functions to run concurrently within the same address space.

- Managed by the Go runtime and can be thought of as independently executing process.

- Can communicate with each other via channels,

- Distinct from operating system thread.

- Go runtime multiplex many goroutines onto a smaller number of OS threads.

- Peemptively execution, they can interrupted by the scheduler to avoid monopolizing the CPU.

## Goroutines - Anonymous Functions

.link https://go.dev/play/p/8_9G-qH3gxb Go Playground

.code ./goroutinesanonymous.go


## Goroutines - Named functions

.link https://go.dev/play/p/AqwubODp_Zp  Go Playground

.code ./goroutinesnamed.go /START OMIT/,/END OMIT/


## Channels

- Facilitate communication and synchronization between goroutines.
- They are typed to ensure data integrity of data transmission.
- Operate on a blocking principle to ensure coordination between sender and receiver.

- They can be either
    - Unbuffered:
        - Have no capacity and block until both sender and receiver are ready.
          They ensure synchronization between sender and receiver goroutines.
    - Buffered: 
        - Can hold a certain number of elements before blocking: 
          They allow sending and receiving values without requiring both sides to be ready simultaneously.

## Channel - Unbuffered

.link https://go.dev/play/p/L-UdGCYGZoh Go Playground
.code ./channelsunbuffered.go /START OMIT/,/END OMIT/

- Program creates buffered channel with capacity 1.
- Sends data to channel asynchronously without immediate blocking.
- Blocks when attempting to receive data.
- Frees immediately after receiving and prints it.


## Channel - Buffered

.link https://go.dev/play/p/m3OIbwk9zdH Go Playground
.code ./channelsbuffered.go /START OMIT/,/END OMIT/

- Program creates an unbuffered channel with a buffer of 10.
- Sends 10 values to the channel asynchronously without immediate blocking, potentially saturating the buffer.
- Program blocks when attempting to receive data, waiting for values to become available, and then prints each received value. If more than 10 values were sent without receiving them, the program would deadlock.


## Channels - Direction  

- They can be either

    - Unidirectional:
        - Restrict the operations that can be performed on them to either send or receive.
          They enforce specific communication patterns and help prevent unintended usage.
    
    - Bidirectional:
        - Allow both sending and receiving operations.
        - They provide flexibility for communication between goroutines in various scenarios.


## Channel - Receive Only

.link https://go.dev/play/p/FuFbVCMv7T0 Go Playground
.code ./channelsdirectionalreceive.go /START OMIT/,/END OMIT/

## Channel - Receive Only Explained
- `someFunction()` returns a read-only channel (`<-chan int`), 
- Callers of the function can only receive values from it.
- However, inside `someFunction()`, a bidirectional channel is created.
- This allows `someFunction()` to send values on channel `c` within its scope.
- When `someFunction()` returns `c` as a read-only channel, it restricts the channel's usage for callers.
- Callers of `someFunction()` can only receive values from the returned channel.


## Channel - Send Only

.link https://go.dev/play/p/y6AkgkLlduN Go Playground
.code ./channelsdirectionalsend.go /START OMIT/,/END OMIT/


## Channel - Send Only Explained

- `someFunction()` function creates a regular bidirectional channel c and returns it as a read-only channel (<-chan int).
- Inside someFunction(), a goroutine sends the value 123 on channel c.
- In `main()` function, a read-only channel is received from `someFunction()`.
- Attempting to send data on the read-only channel would result in a compilation error.
- Finally, the value 123 is received and printed from the read-only channel.

## Channel - Bidirectional

.link https://go.dev/play/p/7FAUEbVLM0M Go Playground
.code ./channelsbidirectional.go


## Channel - Bidirectional Explained

- The `sendData()` function sends values 1 to 5 on the bidirectional channel ch.
- The `receiveData()` function receives and prints values from the same bidirectional channel ch.
- Both functions operate on the same bidirectional channel, allowing communication between them.
- In `main()` function, we create a bidirectional channel ch.
- We start goroutines concurrently to send and receive data on the channel ch.
- After sending all values, the `sendData()` function closes the channel ch using close(ch).
- The `receiveData()` function exits the loop when the channel ch is closed, ensuring graceful termination.

## Select Statement

- The `select` statement in Go let's orchestrate the communication between goroutines via channels.

- It provides a mechanism to concurrently wait on multiple communication operations and select the first one that's ready to proceed.

- Is non-blocking, ensuring efficient resource utilization. 

- Enables dynamic selection of channels and coordinate between goroutines in Go programs.


## Select Statement Syntax

.link https://go.dev/play/p/wZ8r5AMRvqB Go Playground
.code ./select.go /START OMIT/,/END OMIT/

## Select Statement Explained

- Two channels, ch1 and ch2, are created for communication between goroutines.
- Two anonymous functions are started as goroutines. 
- One sends a "ping" message to ch1 every 500 milliseconds.
- The other sends a "pong" message to ch2 every 1 second.
- We enter an infinite loop in the main() function.
- Inside the loop, we use a select statement to receive messages from ch1 and ch2.
- If a message is received from ch1
    - It's printed as "Received message from ch1: [message]".
- If a message is received from ch2:
    - it's printed as "Received message from ch2: [message]".
- The select statement allows the program to wait for and process messages from multiple channels concurrently without blocking.

## Mutex

- Mutex safeguard shared resources from concurrent access by multiple goroutines.
- Ensures that only one goroutine accesses the shared resource at a time.
- Prevents race conditions.
- Maintaining data consistency.
- There are also RWMutexes (read-write mutexes)
- They enable both read-only and write-only access to shared resources.
- Multiple goroutines to simultaneously read from a resource but ensure exclusive access during write operations.
- Enhance performance in scenarios with frequent reads by allowing concurrent access, while still maintaining exclusivity during writes.


## Mutex Example

.link https://go.dev/play/p/mzQYj1RM14f Go Playground
.code ./mutex.go /START OMIT/,/END OMIT/

## Mutex Explained

- We declare a global variable counter to hold an integer value.
- Also a sync.Mutex to synchronize access to the counter.
- `increment()` increments the counter variable within a critical section protected by the mutex lock.
- Inside `main()` a loop spawns 10 goroutines, each of which calls the increment() function.
- After all goroutines have completed, we print the final value of the counter variable.
- Without using the mutex lock to synchronize access to the counter variable, the program may produce incorrect results due to race conditions. Multiple goroutines accessing and modifying the counter variable simultaneously can lead to data races, resulting in unpredictable output.

## Mutex - Without Them

.link https://go.dev/play/p/0YykfKAbtuI Go Playground
.code ./mutexwithoutthem.go /START OMIT/,/END OMIT/

## Mutex - Without Them Explained

- Without using the mutex lock to synchronize access to the counter variable, the program may produce incorrect results due to race conditions.
- Multiple goroutines accessing and modifying the counter variable simultaneously can lead to data races, resulting in unpredictable output. 
- In this case, it's more probable that the final value of counter is less than 1000 compared to when the mutex is used.

## WaitGroups

- WaitGroups facilitate synchronization among goroutines
- Allow the main goroutine to wait until all other ones have completed their tasks.
- Operate by incrementing the WaitGroup counter.
- Increment before launching a goroutine.
- Decrementing it upon its completion.
- Main goroutine can then use the `Wait()` to block until the counter reaches zero.
- They ensure orderly execution and preventing premature termination of the program.

## WaitGroups Syntax

.code ./waitgroups.go /START OMIT/,/END OMIT/

## ErrorGroups

- ErrorGroups in Go streamline error management for concurrent operations, particularly in scenarios involving multiple goroutines.

- Provide a mechanism to accumulate and handle errors reported by goroutines.
- Are commonly used alongside WaitGroups to coordinate error reporting.
- Goroutines can independently report errors to the ErrorGroup while continuing their work.
- The main goroutine waits until all operations are complete before handling any accumulated errors.
- ErrorGroup facilitate early error detection.
- They enable more effective error handling strategies in concurrent programs.

## ErrorGroup Syntax

.link https://go.dev/play/p/atsxAawSe3r Go Playground
.code ./errorgroups.go /START OMIT/,/END OMIT/

## ErrorGroup Explained

- `doTask()` accept an errgroup.Group.
- In `main()` we create an `errgroup.Group`.
- Inside the loop, we create one goroutine for each task but this time from the errgroup.
- The `Wait()` method of errgroup.Group is used to wait for all tasks to finish and collect any errors.
- The program prints any errors that occurred during the tasks or a success message if all tasks completed successfully.

## Race Conditions

- Data races in Go happen when two or more goroutines concurrently access a shared variable without synchronization.
- At least one of the concurrent accesses must be a write operation for a data race to occur.
- Due Go's concurrent execution model, data races can lead to unpredictable behavior and data corruption.
- Go provides tools like the `go run -race` command and the `sync/atomic` package to detect and prevent them.
- Idiomatic Go code uses synchronization primitives such as channels or mutexes to coordinate access to shared variables and prevent data races.

## Race Conditions Example

.link https://go.dev/play/p/1ePWQGs4PL9 Go Playground
.code ./raceconditions.go /START OMIT/,/END OMIT/

## Race Conditions - Explained

- Inside a loop that runs 1000 times, we start multiple goroutines concurrently.
- Each goroutine increments the counter variable without any synchronization mechanism, 
- Due to the lack of synchronization, multiple goroutines may access and modify the counter variable simultaneously, leading to a race condition.
- Race conditions occur when the outcome of the program depends on the timing of operations performed by concurrent threads or goroutines.
- Finally, we print the value of the counter variable.
- Because of the race condition, the final value of counter is unpredictable and may vary between different executions of the program.
- It's likely that the printed value will be less than 1000 because the goroutines may overwrite each other's increments, causing some increments to be lost.

## Race Conditions - Preventing Using Mutex

.link https://go.dev/play/p/52oh5NfzMxF Go Playground
.code ./raceconditionsmutex.go /START OMIT/,/END OMIT/

## Race Conditions - Preventing Using Mutex Explained

- Here we use a mutex to enforce mutual exclusion when accessing the shared `counter` variable.
- Only one goroutine can modify it at a time.
- Each goroutine acquires the lock using `mutex.Lock()` before incrementing the `counter`.
- After the increment, the lock is released with `mutex.Unlock()`, allowing other goroutines to proceed.
- With mutex synchronization, all 1000 increments to the `counter` variable are executed atomically and without interference. Consequently.
- The final value of the `counter` is guaranteed to be 1000 after running the program.

## Race Conditions - Preventing Using Channels

.link https://go.dev/play/p/IbUdzj9DNaK Go Playground 
.code ./raceconditionschannels.go /START OMIT/,/END


## Race Conditions - Preventing Using Channels Explained

- Channels are used to synchronize the execution of concurrent goroutines.
- `counter` channel is utilized to coordinate the increment of the counter variable.
- `done` channel is usedd to signal when all goroutines have finished their execution.
- Each goroutine increments the counter and sends a signal (true) through the done channel to indicate completion of its task.
- A separate goroutine is created to receive signals from all done channels.
- Once all signals are received, the done channel is closed, allowing other goroutines to proceed.
- As a result of the synchronization the expected outcome of obtaining a final counter value of 1000.
- For this particalar usecase we canb see that the use of channels is more convoluted than a simple mutex.


## Context Cancelation

.link https://go.dev/play/p/dbSBSAIkPUH Go Playground
.code ./contextcancellation.go /START OMIT/,/END OMIT/

## Context Cancellation Explained

- There are two goroutines, task1 and task2, each performing some simulated processing.
- A context is created in the main function, which will be used to manage the cancellation of the goroutines.
- Goroutines periodically check for cancellation using <-ctx.Done(), and exit gracefully when the context is cancelled.
- A ticker is created to trigger a timeout after 3 seconds.
- If the timeout occurs before the goroutines complete their tasks, the context is also cancelled.
- The select statement waits for either the timeout from the ticker or the cancellation of the context.
- Whichever happens first will cause the main function to exit.
- Upon cancellation of the context, the defer cancel() ensures that the context is properly cleaned up when the main function exits.

## Worker Pools
- Worker pools in Go manage a fixed number of worker goroutines to process tasks concurrently.
- Tasks are submitted to a work queue, and worker goroutines continuously dequeue tasks and execute them.
- The number of worker goroutines in the pool is typically limited to prevent resource exhaustion.
- Worker pools efficiently utilize system resources while ensuring prompt task processing.
- This design pattern is commonly used in concurrent programming to achieve parallelism and improve task execution efficiency.

## Worker Pools Example

.link https://go.dev/play/p/H2lxXceu6i1 Go Playground
.code ./workerpools.go  /START OMIT/,/END OMIT/

## Worker Pools Explained
- The program defines a worker function responsible for processing jobs
- The jobs are sent through a channel.
- The results are also sent through a results channel.
- In the main function, worker goroutines are spawned based on the specified number of workers.
- Jobs are sent to the worker pool through a buffered jobs channel.
- Each worker goroutine processes incoming jobs concurrently.
- Once all jobs are submitted, the jobs channel is closed to signal that no more jobs will be sent.
- A separate goroutine waits for all workers to finish their jobs using a `sync.WaitGroup` and then closes the results channel.
- Results from the workers are printed as they become available by iterating over the results channel using a range loop.